package edu.uw.apl.vmvols.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.apache.commons.io.FileUtils;

import edu.uw.apl.vmvols.model.virtualbox.VDIDisk;
import edu.uw.apl.vmvols.model.vmware.VMDKDisk;


/**
 * Tests for {@link VirtualMachine}.  Here, we search our local
 * filesystem for locations known to house 'standalone/orphan' .vmdk
 * files, such as those generated by packer/vagrant.
 *
 * @author Stuart Maclean
 */

public class OrphanFileTest extends junit.framework.TestCase {

	public void testPacker1() throws Exception {
		File root = new File( "/home/stuart/playpen/packer" );
		if( !root.isDirectory() )
			return;
		test( root );
	}

	public void testPacker2() throws Exception {
		File root = new File( "/home/stuart/apl/projects/infosec/dims/packer" );
		if( !root.isDirectory() )
			return;
		test( root );
	}

	public void testVagrant1() throws Exception {
		File root = new File( "/lv1/vagrant.d/boxes" );
		if( !root.isDirectory() )
			return;
		test( root );
	}
	
	private void test( File dir ) throws IOException {
		Collection<File> fs = FileUtils.listFiles
			( dir, new String[] { VMDKDisk.FILESUFFIX, VDIDisk.FILESUFFIX },
			  true );
		for( File f : fs ) {
			System.out.println( f );
			VirtualMachine vm = VirtualMachine.create( f );
			assertTrue( f.getName().startsWith( vm.getName() ) );
			List<VirtualDisk> base = vm.getBaseDisks();
			assertEquals( base.size(), 1 );
		}
	}
}

// eof
