/**
 * Copyright Â© 2015, University of Washington
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the University of Washington nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
 * OF WASHINGTON BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package edu.uw.apl.vmvols.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.apache.commons.io.FileUtils;

import edu.uw.apl.vmvols.model.virtualbox.VDIDisk;
import edu.uw.apl.vmvols.model.vmware.VMDKDisk;

/**
 * @author Stuart Maclean
 *
 * Tests for {@link VirtualMachine}.  Here, we search our local
 * filesystem for locations known to house 'standalone/orphan' .vmdk
 * files, such as those generated by packer/vagrant.  There is no
 * actually VM directory associated with such files, so we construct a
 * sort of 'anonymous VM' containing just the standalone .vmdk file.

 * Obviously these tests can only run if the local files are indeed
 * present.
 *
 */

public class OrphanFileTest extends junit.framework.TestCase {

	public void testPacker1() throws Exception {
		File root = new File( "/home/stuart/playpen/packer" );
		if( !root.isDirectory() )
			return;
		test( root );
	}

	public void testPacker2() throws Exception {
		File root = new File( "/home/stuart/apl/projects/infosec/dims/packer" );
		if( !root.isDirectory() )
			return;
		test( root );
	}

	// Vagrant boxes on rejewski.apl
	public void testVagrant1() throws Exception {
		File root = new File( "/lv1/vagrant.d/boxes" );
		if( !root.isDirectory() )
			return;
		test( root );
	}
	
	private void test( File dir ) throws IOException {
		Collection<File> fs = FileUtils.listFiles
			( dir, new String[] { VMDKDisk.FILESUFFIX, VDIDisk.FILESUFFIX },
			  true );
		for( File f : fs ) {
			System.out.println( f );
			VirtualMachine vm = VirtualMachine.create( f );
			assertTrue( f.getName().startsWith( vm.getName() ) );
			List<VirtualDisk> base = vm.getBaseDisks();
			assertEquals( base.size(), 1 );
		}
	}
}

// eof
