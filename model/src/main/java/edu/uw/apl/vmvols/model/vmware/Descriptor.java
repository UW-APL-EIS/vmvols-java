package edu.uw.apl.vmvols.model.vmware;

import java.io.File;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.UUID;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * @author Stuart Maclean
 */
/*
  VMDKFile metadata produced by vmvols tool 'vmdkinfo'.  Prints
  SparseExtentHeader and Descriptor info at head of any .vmdk file.

  DISK FILE 1:
  
  First generation of a virtual machine hard drive. VM generated by
  VMWare Workstation Pro 12 (trial edition), Oct 2015.

  [~/.../infosec/vmvols/cli (master)]$ ./vmdkinfo ~/vmware/Windows\ 7\ x64/Windows\ 7\ x64.vmdk 
Flags: 00000003
Version: 1
Capacity: 125829120
GrainSize: 128
DescriptorOffset: 1
DescriptorSize: 20
NumGTEsPerGT: 512
rgdOffset: 21
gdOffset: 7716
Overhead: 15488
Compression: 0

# Disk DescriptorFile
version=1
encoding="UTF-8"
CID=7c77be3e
parentCID=ffffffff
isNativeSnapshot="no"
createType="monolithicSparse"

# Extent description
RW 125829120 SPARSE "Windows 7 x64.vmdk"

# The Disk Data Base 
#DDB

ddb.adapterType = "lsilogic"
ddb.geometry.cylinders = "7832"
ddb.geometry.heads = "255"
ddb.geometry.sectors = "63"
ddb.longContentID = "998e1e01d9a37fe7ae03f9e17c77be3e"
ddb.uuid = "60 00 C2 92 c7 b3 76 ce-43 c5 92 ee 09 64 6c 58"
ddb.virtualHWVersion = "12"


  DISK FILE 2:

Snapshot (second generation) of the virtual machine hard drive above. VM
  generated by VMWare Workstation Pro 12 (trial edition), Oct 2015.  Note how little/vague the 'parent pointer' is, just a 'hint' in the descriptor.
  
  [~/.../infosec/vmvols/cli (master)]$ ./vmdkinfo ~/vmware/Windows\ 7\ x64/Windows\ 7\ x64-000001.vmdk 
Flags: 00000003
Version: 1
Capacity: 125829120
GrainSize: 128
DescriptorOffset: 1
DescriptorSize: 20
NumGTEsPerGT: 512
rgdOffset: 21
gdOffset: 7716
Overhead: 15488
Compression: 0

# Disk DescriptorFile
version=1
encoding="UTF-8"
CID=7c77be3e
parentCID=7c77be3e
isNativeSnapshot="no"
createType="monolithicSparse"
parentFileNameHint="/home/stuart/vmware/Windows 7 x64/Windows 7 x64.vmdk"
# Extent description
RW 125829120 SPARSE "Windows 7 x64-000001.vmdk"

# The Disk Data Base 
#DDB

  DISK FILE 3:

Standalone vmdk produced by packer (v0.8.6) with a 'virtualbox-iso' builder.
Note how the createType is 'streamOptimized'.

  [~/.../infosec/vmvols/cli (master)]$ ./vmdkinfo ~/apl/projects/infosec/packer-vms/ubuntu-12.04.4-amd64/base/products/ubuntu-12.04.5-amd64-base-disk1.vmdk 
Flags: 00030001
Version: 3
Capacity: 81920000
GrainSize: 128
DescriptorOffset: 1
DescriptorSize: 2
NumGTEsPerGT: 512
rgdOffset: 0
gdOffset: -1
Overhead: 128
Compression: 1

# Disk DescriptorFile
version=1
CID=9f5528be
parentCID=ffffffff
createType="streamOptimized"

# Extent description
RDONLY 81920000 SPARSE "ubuntu-12.04.5-amd64-base-disk1.vmdk"

# The disk Data Base 
#DDB

ddb.virtualHWVersion = "4"
ddb.adapterType="ide"
ddb.geometry.cylinders="16383"
ddb.geometry.heads="16"
ddb.geometry.sectors="63"
ddb.geometry.biosCylinders="1024"
ddb.geometry.biosHeads="255"
ddb.geometry.biosSectors="63"
ddb.uuid.image="ba1d7b83-2e83-4777-90fb-61c8251ccd69"
ddb.uuid.parent="00000000-0000-0000-0000-000000000000"
ddb.uuid.modification="00000000-0000-0000-0000-000000000000"
ddb.uuid.parentmodification="00000000-0000-0000-0000-000000000000"
ddb.comment=""

*/

public class Descriptor {

	/*
	static Descriptor parse( VMDKHeader h, File f ) throws IOException {
		byte[] ba = new byte[(int)h.descriptorSize()];
		RandomAccessFile raf = new RandomAccessFile( f, "r" );
		raf.seek( h.descriptorOffset() * 512 );
		raf.readFully( ba );
		raf.close();
		return new Descriptor( ba );
	}
	*/
	
	Descriptor( byte[] ba ) {
		String s = null;
		try {
			s = new String( ba, "ISO-8859-1" );
		} catch( UnsupportedEncodingException never ) {
		}
		data = s;
		BufferedReader br = new BufferedReader( new StringReader( data ) );
		String line;
		try {
			while( (line = br.readLine()) != null ) {
				line = line.trim();
				if( line.length() == 0 || line.startsWith( "#" ) )
					continue;
				Matcher m = reType.matcher( line );
				if( m.matches() ) {
					type = m.group(1);
					continue;
				}
				m = reUUIDImage.matcher( line );
				if( m.matches() ) {
					uuidImage = UUID.fromString( m.group(1) );
					continue;
				}
				m = reUUIDParent.matcher( line );
				if( m.matches() ) {
					uuidParent = UUID.fromString( m.group(1) );
					continue;
				}
				m = reParentFileNameHint.matcher( line );
				if( m.matches() ) {

					System.err.println( "PFNH " + line );

					
					parentFileNameHint = m.group(1);
					continue;
				}
			}
		} catch( IOException never ) {
		}
	}

	@Override
	public String toString() {
		return data;
	}
	
	public String getCreateType() {
		return type;
	}
	
	public String getParentFileNameHint() {
		return parentFileNameHint;
	}
	
	// createType="monolithicSparse"
	static final Pattern reType = Pattern.compile
		( "createType=\"([A-Za-z]+)\"" );

	// parentFileNameHint="/home/stuart/vmware/Windows 7 x64/Windows 7 x64.vmdk"
	static final Pattern reParentFileNameHint = Pattern.compile
		( "parentFileNameHint=\"([^\"]+)\"" );

	// e1246c7c-05dd-48c5-aa5b-5ad44ce0c13e
	static final String REUUID =
		"\\p{XDigit}{8}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{4}-" +
		"\\p{XDigit}{12}";

	static private final Pattern reUUIDImage = Pattern.compile
		( "ddb\\.uuid\\.image=\"(" + REUUID + ")\"" );

	static private final Pattern reUUIDParent = Pattern.compile
		( "ddb\\.uuid\\.parent=\"(" + REUUID + ")\"" );
	
	final String data;
	String type;
	String parentFileNameHint;
	UUID uuidImage, uuidParent;
}

// eof
