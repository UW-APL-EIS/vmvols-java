<project xmlns="http://maven.apache.org/POM/4.0.0" 
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
			     http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>edu.uw.apl.commons</groupId>
  <artifactId>fuse4j-core</artifactId>
  <version>2400.0.1</version>
  <url>http://eis.apl.uw.edu</url>
  
  <organization>
    <name>Applied Physics Laboratory, University of Washington</name>
    <url>http://www.apl.uw.edu</url>
  </organization>
  
  <developers>
    <developer>
      <id>stuart</id>
      <name>Stuart Maclean</name>
      <email>stuart@apl.uw.edu</email>
    </developer>
  </developers>

  <dependencies>
    <dependency>
      <groupId>edu.uw.apl.commons</groupId>
      <artifactId>native-lib-loader</artifactId>
      <version>2.0.0</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    </dependencies>

    
    <!--
	We only try to build/package the native (jni) code if we are a
	'power' user: mvn -Pnative.  Once done, we then 'git add' the
	resultant .so/.dll sitting under src/main/resources.  Then
	'regular' users see this lib as just a resource to bundle into
	the runtime jar.
    -->
    <profiles>
      <profile>
	<id>native</id>
	<build>
	  <plugins>
	    <plugin>
	      <groupId>org.codehaus.mojo</groupId>
	      <artifactId>native-maven-plugin</artifactId>
	      <version>1.0-alpha-8</version>
	      <executions>
		<execution>
		  <id>javah</id>
		  <phase>compile</phase>
		  <configuration>
		    <!-- 
			 Appears that no fuse4j C file includes any
			 javah-generated headers, so we have no need
			 for any javah step ?? We list the .java files
			 that have native methods anyway, see next.
		    -->
		    <!--
			<javahClassNames>
			<javahClassName>
			fuse.FuseContext
			</javahClassName>
			<javahClassName>
			fuse.FuseFSFillDir
			</javahClassName>
			<javahClassName>
			fuse.FuseMount
			</javahClassName>
			<javahClassName>
			fuse.PasswordEntry
			</javahClassName>
			</javahClassNames>
		    -->
		  </configuration>
		  <goals>
		    <goal>javah</goal>
		  </goals>
		</execution>
	      </executions>
	    </plugin>
	    <plugin>
	      <groupId>org.codehaus.mojo</groupId>
	      <artifactId>exec-maven-plugin</artifactId>
	      <version>1.1</version>
	      <executions>
		<execution>
		  <id>build.native</id>
		  <phase>compile</phase>
		  <goals>
		    <goal>exec</goal>
		  </goals>
		  <configuration>
		    <workingDirectory>
		      src/main/native/${os.name}/${os.arch}
		    </workingDirectory>
		    <executable>make</executable>
		    <commandlineArgs>install</commandlineArgs>
		    <environmentVariables>
		      <PACKAGE>fuse</PACKAGE>
		      <ARTIFACT>${project.artifactId}</ARTIFACT>
		    </environmentVariables>
		  </configuration>
		</execution>
		
		<execution>
		  <id>clean.native</id>
		  <phase>clean</phase>
		  <goals>
		    <goal>exec</goal>
		  </goals>
		  <configuration>
		    <workingDirectory>
		      src/main/native/${os.name}/${os.arch}
		    </workingDirectory>
		    <executable>make</executable>
		    <commandlineArgs>clean</commandlineArgs>
		    <environmentVariables>
		      <PACKAGE>fuse</PACKAGE>
		      <ARTIFACT>${project.artifactId}</ARTIFACT>
		    </environmentVariables>
		  </configuration>
		</execution>
	      </executions>
	    </plugin>
	  </plugins>
	</build>
      </profile>
    </profiles>


    <build>
      <defaultGoal>compile</defaultGoal>
      <plugins>
	<plugin>
	  <artifactId>maven-compiler-plugin</artifactId>
	  <version>2.5</version>
	  <configuration>
	    <source>1.5</source>
	    <target>1.5</target>
	  </configuration>
	</plugin>

      </plugins>
    </build>

</project>
